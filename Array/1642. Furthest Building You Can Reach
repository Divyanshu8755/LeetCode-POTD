class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b) -> b-a); //desc order
        int i=0,diff=0;
        int n=heights.length;
        for(i=0;i<n-1;i++){
            diff=heights[i+1]-heights[i];
            if(diff<=0){
                continue;
            }
            bricks-=diff;
            pq.offer(diff);
            if(bricks<0){
                bricks+=pq.poll();
                ladders--;
            }
            if(ladders<0){
                break;
            }
        }
        return i;
    }
}
            // else{
            //     if( bricks!=0 && bricks >= () ){
            //         bricks-=heights[i+1]-heights[i];
            //         flag=i+1;
            //     }
            //     else if(ladders!=0){
            //         ladders-=1;
            //         flag=i+1;
            //     }
            //     else{
            //         break;
            //     }
            // }
