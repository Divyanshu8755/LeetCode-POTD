/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        HashMap<TreeNode,TreeNode> map=new HashMap<>();
        TreeNode startNode=ParentBFSMapping(root,start,map);
        return minTimeBFS(startNode,map);
    }
    public TreeNode ParentBFSMapping(TreeNode root, int start,HashMap<TreeNode,TreeNode> map){
        Queue<TreeNode> q=new LinkedList<>();
        TreeNode startNode = null;
        q.add(root);
        while(!q.isEmpty()){
            TreeNode current=q.poll();
            if(current.val == start){
                startNode = current;
            }
            if(current.left!=null){
                map.put(current.left,current);
                q.add(current.left);
            }
            if(current.right!=null){
                map.put(current.right,current);
                q.add(current.right);
            }
        }
        return startNode;
    }
    public int minTimeBFS(TreeNode startNode,HashMap<TreeNode,TreeNode> map){
        HashSet<TreeNode> vis=new HashSet<>();
        Queue<TreeNode> q=new LinkedList<>();
        q.add(startNode);
        vis.add(startNode);
        int time=0;
        while(!q.isEmpty()){
            boolean flag=false;
            int l=q.size();
            for(int i=0;i<l;i++){
                TreeNode current=q.poll();
                if(current.left!=null && !vis.contains(current.left)){
                    q.add(current.left);
                    vis.add(current.left);
                    flag=true;
                }
                if(current.right!=null && !vis.contains(current.right)){
                    q.add(current.right);
                    vis.add(current.right);
                    flag=true;
                }
                //for above nodes
                if(map.containsKey(current) && !vis.contains(map.get(current))){
                    q.add(map.get(current));
                    vis.add(map.get(current));
                    flag=true;
                }
            }
            if(flag==true) time++;
        }
        return time;
    }
}
