/*Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true
 

Constraints:

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000
*/


class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        //int freq[]=new int[arr.length];
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            hm.put(arr[i],hm.getOrDefault(arr[i],0)+1);
        }
        for(Map.Entry<Integer,Integer> Entry1: hm.entrySet()){
            for(Map.Entry<Integer,Integer> Entry2: hm.entrySet()){
                if(Entry1.getKey()==Entry2.getKey()){
                    continue;
                }
                if(Entry1.getValue()==Entry2.getValue()){
                    return false;
                }
            }
        }
        return true;
    }
}
